---
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import type { ItemGrid } from '~/types';
import CTA from './CTA.astro';
import { Image } from 'astro:assets'
import type { ImageMetadata } from 'astro';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props as ItemGrid;

const {
  container: containerClass = '',
  // container: containerClass = "sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3",
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `grid gap-8 gap-x-12 sm:gap-y-8 ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
            : columns === 3
            ? 'lg:grid-cols-3 sm:grid-cols-2'
            : columns === 2
            ? 'sm:grid-cols-2 '
            : ''
        }`,
        containerClass
      )}
    >
      {items.map(
        ({ title, description, icon, callToAction, image, servicesItems, price, classes: itemClasses = {} }) => (
          <div class={twMerge('relative flex flex-col', panelClass, itemClasses?.panel, 'p-0')}>
            {image && (
              <div class="">
                <Image
                src={image as ImageMetadata}
                class="object-cover w-full h-64 mb-4 rounded-t-lg"
                alt={image.alt || ''}
                height={350}
                width={450}
                />
              </div>
            )}
            <div class="p-4 flex flex-col justify-between grow">
              <div>
                {(icon || defaultIcon) && (
                  <Icon
                    name={icon || defaultIcon}
                    class={twMerge(
                      'mb-2 w-10 h-10 text-emerald-800',
                      defaultIconClass,
                      itemClasses?.icon,
                      'text-emerald-800'
                    )}
                  />
                )}
                <div class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)}>{title}</div>
                {description && (
                  <p
                    class={twMerge('text-muted mt-2', descriptionClass, itemClasses?.description)}
                    set:html={description}
                  />
                )}
                {servicesItems && (
                  <ul class="mt-2 pl-2 list-disc">
                    {servicesItems.map((item) => (
                      <li class="mt-1">
                        <strong>{item.title}</strong>
                        <br />
                        <p>{item.description}</p>
                      </li>
                    ))}
                  </ul>
                )}
              </div>
              <div>
                {price && (
                  <div class="mt-2 text-xl">
                    <strong>{price}</strong>
                  </div>
                )}
                {callToAction && (
                  <div class="mt-2 text-emerald-900 cursor-pointer">
                    <CTA callToAction={callToAction} />
                  </div>
                )}
              </div>
            </div>
          </div>
        )
      )}
    </div>
  )
}
